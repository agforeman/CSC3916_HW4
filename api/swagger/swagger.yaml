swagger: "2.0"
info:
  version: "0.0.1"
  title: MMDB (MyMovieDataBase)  App
# during dev, should point to your local machine
host: localhost:8080
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
  - application/x-www-form-urlencoded
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /signup:
    x-swagger-router-controller: user_controller
    post:
      description: Posts user to sign-up
      operationId: signup
      parameters:
        - name: user
          description: User properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/UserResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /signin:
    x-swagger-router-controller: user_controller
    post:
      description: Posts user to sign-up
      operationId: signin
      parameters:
        - in: body
          name: user
          description: The user to sign in
          schema:
            type: object
            required:
              - username
              - password
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/UserTokenResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users:
    # binds swagger app logic to a route
    x-swagger-router-controller: user_controller
    get:
      description: Returns 'Users' to the caller
      # used as the method name of the controller
      operationId: getusers
      security:
        -  JwtAuth: []
      parameters:
        - in: header
          name: Authorization
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/UsersResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: Insert 'Users'
      # used as the method name of the controller
      operationId: insertuser
      security:
        - JwtAuth: []
      parameters:
        - in: header
          name: Authorization
          required: false
          type: string
        - name: user
          description: User properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/UserResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users/{id}:
    # binds a127 app logic to a route
    x-swagger-router-controller: user_controller
    get:
      description: Returns 'Users' to the caller
      # used as the method name of the controller
      operationId: getuser
      security:
        - JwtAuth: []
      parameters:
        - in: header
          name: Authorization
          required: false
          type: string
        - name: id
          in: path
          description: The id of the person to whom get
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/UsersResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: Update 'Users'
      # used as the method name of the controller
      operationId: updateuser
      security:
        - JwtAuth: []
      parameters:
        - in: header
          name: Authorization
          required: false
          type: string
        - name: id
          in: path
          description: The id of the person whom to update
          required: true
          type: string
        - name: user
          description: User properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/UserResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      description: Delete 'Users'
      # used as the method name of the controller
      operationId: deleteuser
      security:
        - JwtAuth: []
      parameters:
        - in: header
          name: Authorization
          required: false
          type: string
        - name: id
          in: path
          description: The name of the person whom to delete
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/UserResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /movies:
    x-swagger-router-controller: movie_controller
    get:
      description: Returns "Movies" to the caller
      operationId: getmovies
      security:
        - JwtAuth: []
      parameters:
        - in: header
          name: Authorization
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/MoviesResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: Adds a movie to the database
      operationId: insertmovie
      security:
        - JwtAuth: []
      parameters:
        - in: header
          name: Authorization
          required: false
          type: string
        - name: movie
          in: body
          required: true
          schema:
            $ref: "#/definitions/Movie"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/MovieResponse"
        default:
          description: Failure
          schema:
            $ref: "#/definitions/ErrorResponse"
  /movies/{id}:
    x-swagger-router-controller: movie_controller
    get:
      description: Returns a movie to the caller
      operationId: getmovie
      security:
        - JwtAuth: []
      parameters:
        - in: header
          name: Authorization
          required: false
          type: string
        - name: id
          in: path
          description: The id of the movie to get
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/MoviesResponse"
        default:
          description: Failure
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: Update movie by id
      operationId: updatemovie
      security:
        - JwtAuth: []
      parameters:
        - in: header
          name: Authorization
          required: false
          type: string
        - name: id
          in: path
          description: The id of the movie to update
          required: true
          type: string
        - in: body
          description: The updated movie info
          name: movie
          required: true
          schema:
            $ref: "#/definitions/Movie"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/MovieResponse"
        default:
          description: Failure
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      description: Delete user by id
      operationId: deletemovie
      security:
        - JwtAuth: []
      parameters:
        - in: header
          name: Authorization
          required: false
          type: string
        - name: id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/MovieResponse"
        default:
          description: Failure
          schema:
            $ref: "#/definitions/ErrorResponse"
  /movies/{id}?reviews=false:
    x-swagger-router-controller: movie_controller
    get:
      description: Get specified movie info as well as all associated reviews
      operationId: getmoviereviews
      security:
        - JwtAuth: []
      parameters:
        - in: header
          name: Authorization
          required: false
          type: string
        - in: path
          name: id
          description: The id of the movie to get
          required: true
          type: string
        - in: query
          name: reviews
          required: true
          default: false
  /reviews:
    x-swagger-router-controller: review_controller
    get:
      description: Returns "Reviews" to the caller
      operationId: getreviews
      security:
        - JwtAuth: []
      parameters:
        - in: header
          name: Authorization
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ReviewsResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: Adds a review to the database
      operationId: postreview
      security:
        - JwtAuth: []
      parameters:
        - in: header
          name: Authorization
          required: false
          type: string
        - in: body
          name: review
          required: true
          schema:
            $ref: "#/definitions/Review"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/MovieResponse"
        default:
          description: Failure
          schema:
            $ref: "#/definitions/ErrorResponse"
  /reviews/{id}:
    x-swagger-router-controller: review_controller
    get:
      description: Get a review by its id
      operationId: getreview
      security:
        - JwtAuth: []
      parameters:
        - in: header
          name: Authorization
          required: false
          type: string
        - in: path
          name: id
          description: The id of the review to get
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ReviewsResponse"
        default:
          description: Failure
          schema:
            $ref: "#/definitions/ErrorResponse"
# complex objects have schema definitions
definitions:
  User:
    type: object
    required:
      - name
      - username
      - password
    properties:
      name:
        type: string
      username:
        type: string
      password:
        type: string
  UserResponse:
    required:
      - message
    properties:
      message:
        type: string
  UsersResponse:
    required:
      - size
      - users
    properties:
      size:
        type: integer
      users:
        type: array
        items:
          $ref: "#/definitions/User"
  UserTokenResponse:
    required:
      - token
    properties:
      token:
        type: string
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  CastMember:
    type: object
    required:
      - actor
      - character
    properties:
      actor:
        type: string
      character:
        type: string
  Movie:
    type: object
    required:
      - title
      - year
      - genre
      - cast
    properties:
      title:
        type: string
      year:
        type: string
      genre:
        type: string
        enum: ['Action', 'Adventure', 'Comedy', 'Drama', 'Fantasy', 'Horror', 'Mystery', 'Thriller', 'Western']
      cast:
        type: array
        items:
            $ref: "#/definitions/CastMember"
        minItems: 3
  MovieResponse:
    required:
      - message
    properties:
      message:
        type: string
  MoviesResponse:
    required:
      - size
      - movies
    properties:
      size:
        type: integer
      movies:
        type: array
        items:
          $ref: "#/definitions/Movie"
  Review:
    type: object
    required: 
      - reviewer
      - rating
      - movieid
      - review
    properties:
      reviewer:
        type: string
      rating:
        type: integer
        minimum: 0
        maximum: 5
      movieid:
        type: string
      review:
        type: string
  MovieReviews:
    type: object
    required:
      - movie
      - reviews
    properties:
      movie:
        $ref: "#/definitions/Movie"
      reviews:
        type: array
        items:
          $ref: "#/definitions/Review"
  ReviewResponse:
    required:
      - message
    properties:
      message:
        type: string
  ReviewsResponse:
    required:
      - size
      - movies
    properties:
      size:
        type: integer
      movies:
        type: array
        items:
          $ref: "#/definitions/MovieReviews"
securityDefinitions:
  JwtAuth:
    type: apiKey
    name: Authorization
    in: header